== DataFrames
A security position is a record of ownership that includes the purchase price and date. This information is necessary if you want to calculate how much profit was made on a stock. You can have multiple positions of the same stock, if you purchase it multiple times. Use these positions of Apple stock to create DataFrames in this exercise:

Sym	Price	Date
APPL	105.00	2015/12/31
APPL	117.05	2017/12/01
APPL	289.80	2019/12/27

Instructiion ::
1. Create a dictionary with the exact column names holding the Apple data.  +
    Create a DataFrame using the dictionary.
```
# Create dict holding the data
data = {'Sym': ['APPL', 'APPL', 'APPL'],
        'Price': [105.00, 117.05, 289.80],
        'Date': ['2015/12/31', '2017/12/01', '2019/12/27']}
# Create DataFrame from the data
positions = pd.DataFrame(data=data)
print(positions)
```
2. Create a list of dictionaries with the position data. +
  Create a DataFrame using the list.

```
# Make list of dictionaries
data = [{'Sym': 'APPL', 'Price': 105.00, 'Date': '2015/12/31'},
        {'Sym': 'APPL', 'Price': 117.05, 'Date': '2017/12/01'},
        {'Sym': 'APPL', 'Price': 289.80, 'Date': '2019/12/27'}]

# Create DataFrame from the list
positions = pd.DataFrame(data=data)
print(positions)
```
3. Create a list of lists representing the positions data. +
  Define the column names. +
  Create a DataFrame from the data. +
```
# Create a list of lists
data = [['APPL', 105.00, '2015/12/31'],
        ['APPL', 117.05, '2017/12/01'],
        ['APPL', 289.80, '2019/12/27']]

# Define the column names
columns = ['Sym', 'Price', 'Date']

# Create a DataFrame with the data and column names
df = pd.DataFrame(data=data, columns =columns)
print(df)
```
* Read the pcdg.csv file into a DataFrame
* Print the DataFrame.
```
# Read the data
stocks = pd.read_csv('pcdg.csv')
# Look at the data
print(stocks)
```
3. Accessing Data
.Introduction lesson data
|========================
||Cash|Securities|Balance
|2020-10-01|0.0|-300|1222.0
|2020-10-02|300|-200|1322.0
|2020-10-03|-100.0|700.0|1922.0
|======================
- Use column and row names to select the balance as of October 2nd.
```
# Select the Balance for October 2nd
print(ledger.loc['2020-10-02','Balance'])
```
- Select the balance as of October 3rd using names.
```
# Select the Balance for October 3rd
print(ledger.loc['2020-10-03','Balance'])
```
```
# Cash and Securities for October 3rd
print(ledger.loc['2020-10-03', ['Cash', 'Securities']])
# Balance for October 1st and 3rd
print(ledger.loc[['2020-10-01','2020-10-03'], 'Balance'])
```
