== Accessing the data using loc(names)
- Use column and row names to select the balance as of October 2nd.
```
# Select the Balance for October 2nd
print(ledger.loc['2020-10-02','Balance'])
```
- Select the balance as of October 3rd using names.
```
# Select the Balance for October 3rd
print(ledger.loc['2020-10-03','Balance'])
```
```
# Cash and Securities for October 3rd
print(ledger.loc['2020-10-03', ['Cash', 'Securities']])
# Balance for October 1st and 3rd
print(ledger.loc[['2020-10-01','2020-10-03'], 'Balance'])
```
-- Use slicing to select all columns for October 1st.
```
# All columns for October 1st
print(ledger.loc['2020-10-01', :])
```
--Use slicing to select the balance for all dates.
```
# Balance for all dates
print(ledger.loc[:, 'Balance'])
```

== Accessing the data using iloc(indexes)
|=====================================
| |Symbol	|Purchased	|Quantity	|Price
|0	|AAPL	|2016-01-08	|23	|96.96
|1	|AAPL	|2018-09-07	|50	|221.30
|2	|AMZN	|2020-02-14	|14	|324.95
|=====================================

+++++++++++++++++++++++++++++++++++++++++++++
- Select the oldest price.
```
# Cell first row, Price column
print(positions.iloc[0, 3])
```
- Select the newest symbol.
```
# Cell last row, Symbol column
print(positions.iloc[2, 0])
```
- Use slicing to select the oldest two purchase dates.
```
# Oldest two purchase dates
print(positions.iloc[0:2,1 ])
```
- Use slicing to select the most recent purchase and quantity values.
```
# Newest purchase and quantity
print(positions.iloc[2, 1:3])
```
- Set the quantity of the 2020 purchase to 15.
```
# Set 2020 quantity
positions.iloc[2, 2] = 15
print(positions)
```
- Set all of the quantity values to zero.
```
# Set quantity
positions.iloc[:, 2] = 0

print(positions)
```

